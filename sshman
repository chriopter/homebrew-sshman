#!/usr/bin/env zsh

# SSH Key Manager - Simple SSH key management with cloud sync
VERSION="1.3.1"

# Color definitions
RED='\033[0;31m'
GREEN='\033[0;32m'
BLUE='\033[0;34m'
YELLOW='\033[0;33m'
CYAN='\033[0;36m'
BOLD='\033[1m'
NC='\033[0m' # No Color

# Global variables
SSH_CONFIG="$HOME/.ssh/config"
LOCAL_SYNCED_CONFIG="$HOME/.ssh/sshman_synced_config"
SYNC_DIR=""
IDENTITIES_DIR=""
CONFIG_FILE=""
KNOWN_HOSTS_FILE=""

# Print colored output
print_color() {
    local color=$1
    shift
    echo -e "${color}$@${NC}"
}

# Print header
print_header() {
    echo
    print_color $BLUE "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
    print_color $BLUE "$1"
    print_color $BLUE "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
    echo
}

# Get sync directory from SSH config
get_sync_dir() {
    if [[ -f "$SSH_CONFIG" ]]; then
        local include_line=$(grep -E "^Include " "$SSH_CONFIG" | head -1)
        if [[ -n "$include_line" ]]; then
            # Remove Include prefix, quotes, and handle escaped tildes
            local sync_config=$(echo "$include_line" | sed 's/^Include //' | sed 's/"//g' | sed 's/\\~/~/g' | sed "s|^~|$HOME|")
            SYNC_DIR=$(dirname "$sync_config")
            return 0
        fi
    fi
    return 1
}

# Set directory variables based on sync dir
set_directories() {
    IDENTITIES_DIR="$SYNC_DIR/Identities"
    CONFIG_FILE="$SYNC_DIR/config"
}

# Initialize iCloud access by touching files
init_icloud_access() {
    # Ensure sync directory is accessible (mkdir -p triggers iCloud sync)
    if [[ -n "$SYNC_DIR" ]]; then
        mkdir -p "$SYNC_DIR" 2>/dev/null
    fi
    
    # Ensure identities directory is accessible
    if [[ -n "$IDENTITIES_DIR" ]]; then
        mkdir -p "$IDENTITIES_DIR" 2>/dev/null
    fi
    
    # Touch config file if it exists
    if [[ -f "$CONFIG_FILE" ]]; then
        touch "$CONFIG_FILE" 2>/dev/null
    fi
    
    # Touch all files in the identities directory
    if [[ -d "$IDENTITIES_DIR" ]]; then
        # Use nullglob to handle case when no files match
        setopt local_options nullglob
        
        # Touch all files in the identities directory
        for file in "$IDENTITIES_DIR"/id_*; do
            [[ -f "$file" ]] && touch "$file" 2>/dev/null
        done
        
        # Also touch any .pub files
        for file in "$IDENTITIES_DIR"/*.pub; do
            [[ -f "$file" ]] && touch "$file" 2>/dev/null
        done
    fi
}

# Install or update SSH configuration
install_config() {
    print_header "SSH Key Manager - Installation"
    
    # Check for existing sync directory
    if get_sync_dir; then
        print_color $GREEN "✓ Found existing sync folder: $SYNC_DIR"
        echo -n "Use this folder? (y/n): "
        read -r response
        if [[ "$response" != "y" ]]; then
            SYNC_DIR=""
        fi
    fi
    
    # Prompt for sync directory if not set
    if [[ -z "$SYNC_DIR" ]]; then
        local default_icloud_path="$HOME/Library/Mobile Documents/com~apple~CloudDocs/sshman"
        echo -n "Enter cloud sync folder path (default: ~/Library/Mobile Documents/com~apple~CloudDocs/sshman): "
        read -r sync_path
        
        # Use default if empty
        if [[ -z "$sync_path" ]]; then
            SYNC_DIR="$default_icloud_path"
            print_color $CYAN "Using default iCloud directory"
        else
            SYNC_DIR="${sync_path/#\~/$HOME}"
        fi
        
        print_color $CYAN "Using sync directory: $SYNC_DIR"
    fi
    
    # Validate sync directory can be created
    if ! mkdir -p "$SYNC_DIR" 2>/dev/null; then
        print_color $RED "✗ Cannot create directory: $SYNC_DIR"
        print_color $RED "  Please check the path and permissions"
        return 1
    fi
    
    # Create directories
    print_color $CYAN "Setting up sync directories..."
    
    # Create Identities directory
    if [[ ! -d "$SYNC_DIR/Identities" ]]; then
        mkdir -p "$SYNC_DIR/Identities"
        if [[ $? -ne 0 ]]; then
            print_color $RED "✗ Failed to create Identities directory"
            return 1
        fi
        print_color $GREEN "✓ Created Identities directory"
    else
        print_color $GREEN "✓ Identities directory already exists"
    fi
    
    
    # Handle synced config file
    local synced_config="$SYNC_DIR/config"
    local create_new_config=true
    
    # Check if synced config already exists
    if [[ -f "$synced_config" ]]; then
        print_color $YELLOW "⚠️  Found existing synced config"
        print_color $YELLOW "   Creating a new one will overwrite your existing host entries"
        print_color $YELLOW "   (Your SSH keys will NOT be affected)"
        echo -n "Use existing config? (recommended for additional Mac) (y/n): "
        read -r response
        if [[ "$response" == "y" || "$response" == "Y" ]]; then
            create_new_config=false
            print_color $GREEN "✓ Using existing synced config"
        else
            print_color $CYAN "Creating new synced config (will overwrite existing)"
        fi
    fi
    
    # Create new synced config if needed
    if [[ "$create_new_config" == true ]]; then
        # Convert absolute path to relative path using ~
        local relative_sync_dir="${SYNC_DIR/#$HOME/~}"
        
        {
            echo "# SSH Key Manager Configuration"
            echo "# Generated by sshman"
            echo ""
            echo "# Default identity files location"
            echo "IdentityFile \"$relative_sync_dir/Identities/id_ed25519\""
            echo "IdentityFile \"$relative_sync_dir/Identities/id_rsa\""
            echo "IdentityFile \"$relative_sync_dir/Identities/id_ecdsa\""
            echo ""
            echo "# SSH Agent configuration (macOS)"
            echo "AddKeysToAgent yes"
            echo "UseKeychain yes"
        } > "$synced_config"
        
        if [[ $? -ne 0 ]]; then
            print_color $RED "✗ Failed to create synced config file"
            return 1
        fi
        
        chmod 600 "$synced_config"
        if [[ $? -ne 0 ]]; then
            print_color $RED "✗ Failed to set permissions on synced config"
            return 1
        fi
        
        print_color $GREEN "✓ Created new synced config file"
    fi
    
    # Update local SSH config to only include the synced config
    local temp_config=$(mktemp)
    # Convert absolute path to relative path using ~
    local relative_sync_dir="${SYNC_DIR/#$HOME/~}"
    local include_line="Include \"$relative_sync_dir/config\""
    
    # Create new local config with just the Include directive
    {
        echo "# SSH Key Manager Configuration"
        echo "# This file includes your cloud-synced SSH configuration"
        echo ""
        echo "# Touch iCloud files before reading to ensure access"
        # For Match exec, we need to use \$HOME which will be expanded at runtime
        local match_sync_dir="${SYNC_DIR/#$HOME/\$HOME}"
        echo "Match exec \"mkdir -p \\\"$match_sync_dir\\\" \\\"$match_sync_dir/Identities\\\" 2>/dev/null; touch \\\"$match_sync_dir/config\\\" 2>/dev/null; find \\\"$match_sync_dir/Identities\\\" -name 'id_*' -type f -exec touch {} \\; 2>/dev/null; true\""
        echo ""
        echo "$include_line"
        echo ""
        
        # Append existing config, removing our old settings
        if [[ -f "$SSH_CONFIG" ]]; then
            # Remove all old sshman-managed lines
            grep -v -E "^Include \"?$SYNC_DIR/config\"?|^Match exec.*touch.*$SYNC_DIR/config|^UserKnownHostsFile \"?$SYNC_DIR/known_hosts\"?|# SSH Key Manager Configuration|# Generated by sshman|# This file includes your cloud-synced SSH configuration|# Touch iCloud files before reading|# Include your cloud-synced SSH config|# Cloud-synced known_hosts file|# Default identity files location|# SSH Agent configuration \(macOS\)|^AddKeysToAgent yes|^UseKeychain yes|^IdentityFile \"?$SYNC_DIR/Identities/" "$SSH_CONFIG" | grep -v "^# ===== Existing Configuration =====$" | sed '/^$/N;/^\n$/d'
        fi
    } > "$temp_config"
    
    # Backup existing config
    if [[ -f "$SSH_CONFIG" ]]; then
        cp "$SSH_CONFIG" "$SSH_CONFIG.backup.$(date +%Y%m%d_%H%M%S)"
        print_color $YELLOW "✓ Backed up existing config"
    fi
    
    # Install new config
    mv "$temp_config" "$SSH_CONFIG"
    if [[ $? -ne 0 ]]; then
        print_color $RED "✗ Failed to update SSH config"
        return 1
    fi
    
    chmod 600 "$SSH_CONFIG"
    if [[ $? -ne 0 ]]; then
        print_color $RED "✗ Failed to set permissions on SSH config"
        return 1
    fi
    
    print_color $GREEN "✓ Updated local SSH config"
    
    set_directories
    
    # Final summary
    echo
    print_color $GREEN "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
    print_color $GREEN "✓ Installation complete!"
    print_color $GREEN "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
    echo
    print_color $CYAN "📁 Sync folder: $SYNC_DIR"
    print_color $CYAN "🔑 Identities: $IDENTITIES_DIR"
    print_color $CYAN "⚙️  Config: $CONFIG_FILE"
    echo
    
    # Add helpful message for new vs existing setup
    if [[ "$create_new_config" == false ]]; then
        print_color $YELLOW "💡 Using existing synced configuration"
        print_color $YELLOW "   Your SSH keys and settings have been preserved"
    else
        print_color $YELLOW "💡 New sync folder initialized"
        print_color $YELLOW "   Add SSH keys to the Identities folder to sync them"
    fi
}

# Check if a key is encrypted
is_key_encrypted() {
    local key_file=$1
    # Try to load the key with an empty passphrase
    # If it succeeds, the key is NOT encrypted
    # If it fails, the key IS encrypted
    if ssh-keygen -y -P "" -f "$key_file" >/dev/null 2>&1; then
        return 1  # Key loaded with empty passphrase = NOT encrypted
    else
        return 0  # Key failed to load with empty passphrase = IS encrypted
    fi
}

# Get key fingerprint
get_key_fingerprint() {
    local key_file=$1
    ssh-keygen -lf "$key_file" 2>/dev/null | awk '{print $2}'
}

# Get key comment
get_key_comment() {
    local key_file=$1
    ssh-keygen -lf "$key_file" 2>/dev/null | cut -d' ' -f3-
}

# List all identities
list_identities() {
    print_header "Available Identities"
    
    if [[ ! -d "$IDENTITIES_DIR" ]]; then
        print_color $RED "✗ No identities directory found. Run installation first."
        return 1
    fi
    
    # Touch directory to ensure iCloud files are accessible
    touch "$IDENTITIES_DIR" 2>/dev/null
    
    # Display path with ~ for readability
    local display_path="${IDENTITIES_DIR/#$HOME/~}"
    print_color $CYAN "📁 $display_path"
    echo
    
    local found=0
    # Use nullglob to handle the case when no files match
    setopt local_options nullglob
    
    for key in "$IDENTITIES_DIR"/id_*; do
        # Skip public keys
        [[ "$key" == *.pub ]] && continue
        
        # Touch the file to ensure it's accessible
        touch "$key" 2>/dev/null
        
        # Check if it's a regular file
        [[ -f "$key" ]] || continue
        
        found=1
        local basename=$(basename "$key")
        local fingerprint=$(get_key_fingerprint "$key")
        local comment=$(get_key_comment "$key")
        
        if is_key_encrypted "$key"; then
            print_color $GREEN "🔐 $basename [ENCRYPTED]"
        else
            print_color $RED "🔓 $basename [NOT ENCRYPTED] ⚠️"
        fi
        
        [[ -n "$fingerprint" ]] && print_color $YELLOW "   Fingerprint: $fingerprint"
        [[ -n "$comment" ]] && echo "   Comment: $comment"
        echo
    done
    
    if [[ $found -eq 0 ]]; then
        print_color $YELLOW "No identities found in $display_path"
    fi
}

# Generate new identity
generate_identity() {
    print_header "Generate New Identity"
    
    # Ensure directories are set
    if [[ -z "$IDENTITIES_DIR" ]]; then
        if ! get_sync_dir || ! set_directories; then
            print_color $RED "✗ No sync directory configured. Run installation first."
            return 1
        fi
    fi
    
    # Key type selection
    echo "Select key type:"
    local key_types=("ed25519 (recommended)" "rsa" "ecdsa")
    select key_type_option in "${key_types[@]}"; do
        case $REPLY in
            1) local key_type="ed25519"; break;;
            2) local key_type="rsa"; break;;
            3) local key_type="ecdsa"; break;;
            *) print_color $RED "Invalid option"; continue;;
        esac
    done
    
    # Get comment
    echo -n "Enter comment (e.g., email@example.com): "
    read -r comment
    
    # Get filename
    echo -n "Enter identity name (e.g., github, work): "
    read -r identity_name
    local key_path="$IDENTITIES_DIR/id_${key_type}_${identity_name}"
    
    # Check if key exists
    if [[ -f "$key_path" ]]; then
        print_color $YELLOW "⚠️  Key already exists: $key_path"
        echo -n "Overwrite? (y/n): "
        read -r response
        [[ "$response" != "y" ]] && return
    fi
    
    # Generate key (force passphrase)
    print_color $CYAN "Generating $key_type key..."
    print_color $YELLOW "⚠️  You MUST set a passphrase for encryption!"
    
    if [[ "$key_type" == "rsa" ]]; then
        ssh-keygen -t rsa -b 4096 -C "$comment" -f "$key_path"
    else
        ssh-keygen -t "$key_type" -C "$comment" -f "$key_path"
    fi
    
    # Verify encryption
    if is_key_encrypted "$key_path"; then
        print_color $GREEN "✓ Key generated successfully and is encrypted!"
        print_color $CYAN "  Private key: $key_path"
        print_color $CYAN "  Public key: ${key_path}.pub"
    else
        print_color $RED "✗ Key is not encrypted! Removing..."
        rm -f "$key_path" "${key_path}.pub"
        return 1
    fi
}

# Add key to keychain
add_to_keychain() {
    print_header "Add Identity to Keychain"
    
    # Ensure directories are set
    if [[ -z "$IDENTITIES_DIR" ]]; then
        if ! get_sync_dir || ! set_directories; then
            print_color $RED "✗ No sync directory configured. Run installation first."
            return 1
        fi
    fi
    
    # List available keys
    echo "Select identity to add to keychain:"
    local keys=()
    for key in "$IDENTITIES_DIR"/id_*; do
        [[ ! -f "$key" || "$key" == *.pub ]] && continue
        keys+=("$key")
    done
    
    if [[ ${#keys[@]} -eq 0 ]]; then
        print_color $RED "No identities found."
        return 1
    fi
    
    select key_path in "${keys[@]}"; do
        [[ -n "$key_path" ]] && break
    done
    
    # Check if encrypted
    if ! is_key_encrypted "$key_path"; then
        print_color $RED "✗ Cannot add unencrypted key to keychain!"
        return 1
    fi
    
    # Add to keychain
    print_color $CYAN "Adding to keychain..."
    if ssh-add --apple-use-keychain "$key_path"; then
        print_color $GREEN "✓ Successfully added to keychain!"
        print_color $YELLOW "💡 Note: Keychain entries are local to this Mac"
        print_color $YELLOW "   Run this on each Mac where you need the key"
    else
        print_color $RED "✗ Failed to add to keychain"
        return 1
    fi
}

# Link identity to server
link_to_server() {
    print_header "Link Identity to Server"
    
    # Ensure directories are set
    if [[ -z "$IDENTITIES_DIR" ]]; then
        if ! get_sync_dir || ! set_directories; then
            print_color $RED "✗ No sync directory configured. Run installation first."
            return 1
        fi
    fi
    
    # Get host details
    echo -n "Enter hostname (e.g., github.com): "
    read -r hostname
    
    echo -n "Enter host alias (e.g., github-work) [default: $hostname]: "
    read -r host_alias
    [[ -z "$host_alias" ]] && host_alias="$hostname"
    
    echo -n "Enter username [default: root]: "
    read -r username
    [[ -z "$username" ]] && username="root"
    
    # Select identity
    echo "Select identity to use:"
    local keys=()
    for key in "$IDENTITIES_DIR"/id_*; do
        [[ ! -f "$key" || "$key" == *.pub ]] && continue
        keys+=("$key")
    done
    
    if [[ ${#keys[@]} -eq 0 ]]; then
        print_color $RED "No identities found."
        return 1
    fi
    
    select key_path in "${keys[@]}"; do
        [[ -n "$key_path" ]] && break
    done
    
    # Add to config
    # Convert absolute path to relative path using ~
    local relative_key_path="${key_path/#$HOME/~}"
    
    local config_entry="
Host $host_alias
    HostName $hostname
    User $username
    IdentityFile \"$relative_key_path\"
    IdentitiesOnly yes"
    
    echo "$config_entry" >> "$CONFIG_FILE"
    
    print_color $GREEN "✓ Successfully linked identity to $host_alias!"
    print_color $CYAN "You can now use: ssh $host_alias"
}

# Main menu
show_menu() {
    while true; do
        print_header "SSH Key Manager"
        
        echo "1) Install/Update Configuration"
        echo "2) List Identities"
        echo "3) Generate New Identity"
        echo "4) Add to Keychain"
        echo "5) Link Identity to Server"
        echo "6) Exit"
        echo
        echo -n "Select option: "
        
        read -r option
        
        case $option in
            1) 
                install_config
                # Refresh directories after installation
                if get_sync_dir; then
                    set_directories
                fi
                ;;
            2) list_identities;;
            3) generate_identity;;
            4) add_to_keychain;;
            5) link_to_server;;
            6) print_color $GREEN "Goodbye!"; exit 0;;
            *) print_color $RED "Invalid option";;
        esac
        
        echo
        echo -n "Press Enter to continue..."
        read -r
    done
}

# Initialize
main() {
    # Try to get sync directory
    if get_sync_dir; then
        set_directories
        # Initialize iCloud access
        init_icloud_access
    fi
    
    # Show menu
    show_menu
}

# Run main function
main "$@"